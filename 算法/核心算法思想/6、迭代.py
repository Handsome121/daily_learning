"""
在使用迭代算法解决问题时，需要做好如下3个方面的工作。
（1）确定迭代变量
在可以使用迭代算法解决的问题中，至少存在一个迭代变量，即直接或间接地不断由旧值递推出新值的变量。
（2）建立迭代关系式
迭代关系式是指如何从变量的前一个值推出其下一个值的公式或关系。通常可以使用递推或倒推的方法来建立迭代关系式，迭代关系式的建立是解决迭代问题的关键。
（3）对迭代过程进行控制
在编写迭代程序时，必须确定在什么时候结束迭代过程，不能让迭代过程无休止地重复执行下去。通常可分为如下两种情况来控制迭代过程：
① 所需的迭代次数是个确定的值，可以计算出来，可以构建一个固定次数的循环来实现对迭代过程的控制；
② 所需的迭代次数无法确定，需要进一步分析出用来结束迭代过程的条件。
"""


def f(x):
    # f的方程
    return x ** 3.0 - 2.0 * x + 1.0


def f_first_order(x):
    # f的一阶导数
    return 3.0 * x ** 2 - 2.0


def get_root(x0, max_iter=50, tol=1e-7):
    # 将初始值浮点化
    p0 = x0 * 1.0
    for i in range(max_iter):

        # f的一阶导数不能为0，最普遍的说法是不能非正定
        p = p0 - f(p0) / f_first_order(p0)

        # 如果小于精度值则退出迭代
        if abs(p - p0) < tol:  # tol是判断迭代更新的阈值

            return u'经过%s次的迭代，我们估计的参数值是%s' % (i + 1, p)

        p0 = p

    print(u'已达到最大迭代次数， 但是仍然无法收敛')


if __name__ == '__main__':
    print(get_root(2))  # 由于牛顿迭代方法是局部最优解，不同的初始值有不同的结果。初始值分别取2、0、-2
