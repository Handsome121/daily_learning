"""
① 递归过程一般通过函数或子过程来实现。
② 递归算法在函数或子过程的内部，直接或者间接地调用自己的算法。
③ 递归算法实际上是把问题转化为规模缩小了的同类问题的子问题，然后再递归调用函数或过程来表示问题的解。
在使用递归算法时，读者应该注意如下4点。
① 递归是在过程或函数中调用自身的过程。
② 在使用递归策略时，必须有一个明确的递归结束条件，这称为递归出口。
③ 递归算法通常显得很简洁，但是运行效率较低，所以一般不提倡用递归算法设计程序。
④ 在递归调用过程中，系统用栈来存储每一层的返回点和局部量。如果递归次数过多，则容易造成栈溢出，所以一般不提倡用递归算法设计程序。
"""


def factorial(n):
    """
    递归实现阶乘
    :param n:
    :return:
    """
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(5))

